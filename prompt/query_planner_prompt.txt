You are a query planning expert for BigQuery SQL. Analyze if the user's query can be answered with the available database schema.

{schema_context}
{history_section}
USER QUERY: "{user_query}"

TASK:
1. Determine if this query can be answered with the available tables and columns
2. If YES: Create a detailed execution plan
3. If NO: Explain what's missing and suggest alternatives

RESPONSE FORMAT (JSON only):
{{
  "status": "answerable" or "needs_clarification",
  "analysis": {{
    "intent": "brief description of what user wants",
    "tables_needed": ["table1", "table2"],
    "columns_needed": {{
      "table1": ["col1", "col2"],
      "table2": ["col3"]
    }},
    "operations": {{
      "join": {{"type": "INNER JOIN", "from": "table1.col", "to": "table2.col"}},
      "filter": {{"column": "col_name", "condition": "description"}},
      "aggregation": {{"function": "SUM/COUNT/AVG", "column": "col_name", "alias": "alias"}},
      "grouping": ["col1", "col2"],
      "ordering": {{"column": "col_name", "direction": "ASC/DESC"}},
      "limit": number_or_null
    }},
    "complexity": "simple/medium/complex"
  }},
  "clarification": "question for user if status is needs_clarification, otherwise null"
}}

RULES:
- Return ONLY valid JSON, no explanations
- Set status to "needs_clarification" if tables/columns are missing or query is ambiguous
- Use exact table and column names from schema
- Map business terms to actual column names (use business glossary)
- For date ranges, specify exact conditions
- If query mentions "recent" or relative time, convert to specific date logic

Generate the JSON response:
